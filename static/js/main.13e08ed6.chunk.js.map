{"version":3,"sources":["context.js","component/navbar.js","component/content.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","UserProvider","state","user","dispatch","action","reducer","type","fetch","then","response","json","data","setState","catch","err","alert","Provider","value","this","props","children","Component","UserConsumer","Consumer","Navbar","RandomUser","e","className","onClick","bind","useState","page","setPage","results","src","picture","large","alt","name","first","last","email","dob","date","toString","split","location","street","city","country","cell","align","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.13e08ed6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst UserContext = React.createContext();\r\n// Provider, Consumer\r\n\r\nexport class UserProvider extends Component {\r\n  state = {\r\n    user: {},\r\n    dispatch: action => {\r\n      this.reducer(action)\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    fetch('https://randomuser.me/api/?nat=tr')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ user: data }))\r\n      .catch(err => alert('Opps!'))\r\n  }\r\n\r\n  reducer = (action) => {\r\n    switch (action.type) {\r\n      case \"CHANCE_USER\":\r\n        fetch('https://randomuser.me/api/?nat=tr')\r\n          .then(response => response.json())\r\n          .then(data => this.setState({ user: data }))\r\n          .catch(err => alert('Opps!'))\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <UserContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    )\r\n  }\r\n}\r\nconst UserConsumer = UserContext.Consumer;\r\n\r\nexport default UserConsumer;","import React from 'react'\r\nimport UserConsumer from '../context'\r\n\r\nconst Navbar = () => {\r\n    let RandomUser = (dispatch, e) => {\r\n        dispatch({ type: \"CHANCE_USER\"});\r\n    }\r\n\r\n    return (\r\n        <UserConsumer>\r\n            {\r\n                value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"nav\">\r\n                            <div className='nav-top'><h3>Random User</h3></div>\r\n                            <div className='nav-content'>\r\n                                <center>\r\n                                    <button onClick={RandomUser.bind(this, dispatch)}>Random</button>\r\n                                </center>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        </UserConsumer>\r\n    )\r\n}\r\nexport default Navbar","import React, { useState } from 'react'\r\nimport UserConsumer from '../context'\r\n\r\nconst Navbar = () => {\r\n    const [page, setPage] = useState('user');\r\n\r\n    let date = (text) => {\r\n        let newText = text.toString()\r\n        return newText.split('T')[0]\r\n    }\r\n\r\n    return (\r\n        <UserConsumer>\r\n            {\r\n                value => {\r\n                    const { user } = value;\r\n                    if (typeof (user.results) === \"undefined\") {\r\n                        return (\r\n                            <p>Loading...</p>\r\n                        )\r\n                    }\r\n                    return (\r\n                        <center>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"top-content\">\r\n                                    <img src={user.results[0].picture.large} alt=\"Profile Photo\" />\r\n                                </div>\r\n                                <div className=\"bottom-content\">\r\n                                    <h3>\r\n                                        {page === 'user' ? (\r\n                                            `${user.results[0].name.first} ${user.results[0].name.last}`\r\n                                        )\r\n                                            :\r\n                                            page === 'e-mail' ? (\r\n                                                `${user.results[0].email}`\r\n                                            )\r\n                                                :\r\n                                                page === 'date' ? (\r\n                                                    `${date(user.results[0].dob.date)}`\r\n                                                )\r\n                                                    :\r\n                                                    page === 'map' ? (\r\n                                                        `${user.results[0].location.street.name} ${user.results[0].location.city}/${user.results[0].location.country}`\r\n                                                    )\r\n                                                        :\r\n                                                        page === 'phone' ? (\r\n                                                            `${user.results[0].cell}`\r\n                                                        )\r\n                                                            : null\r\n\r\n\r\n                                        }\r\n                                    </h3>\r\n                                </div>\r\n                                <div className=\"navigate\">\r\n                                    <div className=\"row\" align=\"center\">\r\n                                        <div className=\"col\" onClick={() => setPage('user')}>\r\n                                            <i className=\"far fa-user fa-2x\"></i>\r\n                                        </div>\r\n                                        <div className=\"col\" onClick={() => setPage('e-mail')}>\r\n                                            <i className=\"far fa-envelope fa-2x\"></i>\r\n                                        </div>\r\n                                        <div className=\"col\" onClick={() => setPage('date')}>\r\n                                            <i className=\"far fa-calendar-alt fa-2x\"></i>\r\n                                        </div>\r\n                                        <div className=\"col\" onClick={() => setPage('map')}>\r\n                                            <i className=\"far fa-map fa-2x\"></i>\r\n                                        </div>\r\n                                        <div className=\"col\" onClick={() => setPage('phone')}>\r\n                                            <i className=\"fas fa-phone-alt fa-2x\"></i>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </center>\r\n                    )\r\n                }\r\n            }\r\n        </UserConsumer>\r\n    )\r\n}\r\nexport default Navbar","import React from 'react';\nimport './App.css';\n\nimport Navbar from './component/navbar';\nimport Content from './component/content';\n\nfunction App() {\n  return (\n   <div>\n    <Navbar/>\n    <Content/>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {UserProvider} from './context';\n\nReactDOM.render(\n  <UserProvider>\n    <App />\n  </UserProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}